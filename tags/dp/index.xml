<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dp on 蒟蒻的博客</title>
    <link>http://whatever.seraphim.rocks/tags/dp/</link>
    <description>Recent content in Dp on 蒟蒻的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Mar 2018 12:35:41 +0000</lastBuildDate>
    
	<atom:link href="http://whatever.seraphim.rocks/tags/dp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bzoj3462题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj3462/</link>
      <pubDate>Fri, 09 Mar 2018 12:35:41 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj3462/</guid>
      <description>这道题的做法挺妙的。
首先把S分解，如果有平方因子，答案显然是0，否则假设$S=p_1p_2\cdots p_k$，那么易知$k\le 7$。
这个时候注意到n非常大，直接用背包来做很不现实。但是$p_1,p_2\cdots p_k$的最大公约数很小，因而可以把$p_i$取的次数表示成$x_i\frac{S}{p_i}+y_i(0\le y_i&amp;lt;\frac{S}{p_i})$的形式，那么$x_i$每增加1，总和增加$S$，因而$n\mod{S}$的部分只能用$y_i$来凑。
$y_i$的总和不会超过$kS$，这部分可以枚举总和$n\mod{S}+tS(0\le t&amp;lt;k)$，然后用背包来求，$x_i$的部分可以用插板法直接计算。
代码：
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #define ele long long using namespace std; #define maxs 2000010 #define maxk 7 #define MOD 1000000007 ele s,q,k,a[maxk],f[maxs*maxk],fac[maxk],ifac[maxk]; inline ele pw(ele a,ele x){ ele ans=1,tmp=a%MOD; for (; x; x&amp;gt;&amp;gt;=1,tmp=tmp*tmp%MOD) if (x&amp;amp;1) ans=ans*tmp%MOD; return ans; } inline ele C(ele n,ele m){ ele ans=1; for (int i=0; i&amp;lt;m; ++i) ans=ans*((n-i)%MOD)%MOD; return ans*ifac[m]%MOD; } int main(){ fac[0]=1; for (int i=1; i&amp;lt;maxk; ++i) fac[i]=fac[i-1]*i%MOD; ifac[maxk-1]=pw(fac[maxk-1],MOD-2); for (int i=maxk-2; ~i; --i) ifac[i]=ifac[i+1]*(i+1)%MOD; scanf(&amp;quot;%lld%lld&amp;quot;,&amp;amp;s,&amp;amp;q); ele tmp=s; k=0; for (int i=2; i*i&amp;lt;=s; ++i) if (tmp%i==0){ if ((tmp/i)%i==0){ for (int j=0; j&amp;lt;q; ++j) puts(&amp;quot;0&amp;quot;); return 0; } tmp/=i; a[k++]=i; } if (tmp&amp;gt;1) a[k++]=tmp; memset(f,0,sizeof(f)); f[0]=1; for (int i=0; i&amp;lt;k; ++i){ for (int j=a[i]; j&amp;lt;s*k; ++j) (f[j]+=f[j-a[i]])%=MOD; for (int j=s*k-1; j&amp;gt;=s; --j) (f[j]+=MOD-f[j-s])%=MOD; } while (q--){ ele n; scanf(&amp;quot;%lld&amp;quot;,&amp;amp;n); for (int i=0; i&amp;lt;k; ++i) n-=a[i]; if (n&amp;lt;0) puts(&amp;quot;0&amp;quot;); else{ ele ans=0; for (int t=0; t&amp;lt;k &amp;amp;&amp;amp; n%s+t*s&amp;lt;=n; ++t){ ele t1=(n-n%s-t*s)/s; (ans+=C(t1+k-1,k-1)*f[n%s+t*s]%MOD)%=MOD; } printf(&amp;quot;%lld\n&amp;quot;,ans); } } return 0; }  </description>
    </item>
    
    <item>
      <title>jzoj5523题解</title>
      <link>http://whatever.seraphim.rocks/post/jz5523/</link>
      <pubDate>Sat, 20 Jan 2018 14:27:24 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/jz5523/</guid>
      <description>看AC人数来看应该是全场最简单的一道题，可是我就这道题没做出来……sbwhj……
首先注意到在加号后面加括号是毫无意义的，所以我们可以钦定括号只能加在减号后面。此时括号的作用就是把里面除了第一个数以外的所有数的贡献取负，那我们又可以得到两层以上的括号嵌套总能改成不超过两层的括号嵌套。
让f[i][0/1/2]表示考虑前i个数，式子最后有0/1/2个右括号的时候的最大值。转移的时候，按运算符分两种情况讨论：
 减号。此时这个数可以新开一个括号，即-(A)，贡献为-A；也可以塞到前面的括号里面或者放在前面括号外面，贡献为+A或-A，视塞的层数奇偶性而定。 加号。此时这个数不能新开一个括号，只能塞到前面的括号里面或者放在最外面。  代码：
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #define ele long long using namespace std; #define maxn 100010 const ele INF=1e18; ele n,a[maxn],f[maxn][3]; bool b[maxn]; char s[100]; int main(){ //freopen(&amp;quot;calculate.in&amp;quot;,&amp;quot;r&amp;quot;,stdin); freopen(&amp;quot;calculate.out&amp;quot;,&amp;quot;w&amp;quot;,stdout); scanf(&amp;quot;%lld&amp;quot;,&amp;amp;n); for (int i=0; i&amp;lt;n*2-1; ++i){ scanf(&amp;quot;%s&amp;quot;,s); if (i&amp;amp;1) b[(i+1)&amp;gt;&amp;gt;1]=(s[0]==&#39;+&#39;); else{ ele tmp=0,L=strlen(s); for (int i=0; i&amp;lt;L; ++i) tmp=(tmp&amp;lt;&amp;lt;3)+(tmp&amp;lt;&amp;lt;1)+s[i]-&#39;0&#39;; a[i&amp;gt;&amp;gt;1]=tmp; } } f[0][0]=a[0]; f[0][1]=f[0][2]=-INF; for (int i=0; i&amp;lt;n-1; ++i) if (b[i+1]){ f[i+1][0]=max(max(f[i][0],f[i][1]),f[i][2])+a[i+1]; f[i+1][1]=max(f[i][1],f[i][2])-a[i+1]; f[i+1][2]=f[i][2]+a[i+1]; } else{ f[i+1][0]=max(max(f[i][0],f[i][1]),f[i][2])-a[i+1]; f[i+1][1]=max(f[i][1],f[i][2])+a[i+1]; f[i+1][1]=max(f[i+1][1],f[i][0]-a[i+1]); f[i+1][2]=max(f[i][1],f[i][2])+a[i+1]; } printf(&amp;quot;%lld\n&amp;quot;,max(max(f[n-1][0],f[n-1][1]),f[n-1][2])); return 0; }  </description>
    </item>
    
    <item>
      <title>雅礼集训2018-1</title>
      <link>http://whatever.seraphim.rocks/post/yali2018-1/</link>
      <pubDate>Mon, 15 Jan 2018 12:59:35 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/yali2018-1/</guid>
      <description>D1 上午讲题，下午练习赛T1和T3都是我见过的题。T1考虑prufer编码随意dp一下，T2是个博弈大讨论，注意不要漏情况，T3是个玄妙的dp。
我那台机的键盘真是让人无比不爽，退格键得要准确地敲中正中间才能按下去，而且其实敲中了还是比较费劲，有的时候甚至要两根手指发力。
D2 考得挺不满意的……看了一遍题之后马上觉得T3很可做就去BB，但实际上我并不擅长这种博弈大讨论。T1是一个结论题，我推结论的时候用到了去年WC的时候jc（？）讲的一个结论，可是一开始记错结论了，还好后来想起正确的结论然后成功AC。T2是我做过的一个题目的模型的加强版，可惜我掌握得还不够熟练所以没想出来，可能也有一部分原因是做题顺序不对导致T3浪费太多时间。
总的来讲今天的题目不算太难，我的发挥还是欠缺稳定。
D3 讲字符串，发现自己还是过于naive。fft不止可以算$\sum (a_i-b_i)^2$这样的东西，有必要的话可以算$\sum a_i b_i(a_i-b_i)^2$。
我写的hash屡次被卡自然溢出/被卡常数/卡自然溢出也卡常数，于是我终于下定决心学了一下倍增……
D4 t2和t3都不难，结果变成了拼t1……
我已开始也想到应该是要IDA*什么的，然而想不到好的估价函数，后来BB出来一个巨恶心的$O(n^{??})$的DP，完全没有调试的勇气，所以我也不知道它对不对……
D5 讲仙人掌和线性代数。仙人掌只是讲了圆方树，嘴巴起来还是不太难的。线性代数讲得其实挺友好的，学习到了bzoj3569这样给边赋随机权值这样的技巧，以及如何在线性基里面删去一个数。求积和式是一个np的问题，所以以后如果想做法的时候发现可以规约到积和式，那可能就得观察特殊性质/考虑换一个做法了……
D6 炸了炸了……
t1注意到转移的时候需要快速计算差分，据此想到把k次幂拆成下降幂。可是……我没有想到……
t2正解是树套树，因为正解常数比较大，放到dfs树上做一个在线莫队也是可以的。然而我没想到把颜色也分块，以为过不了，最后写了个kdtree……于是我得到了比标算更大的常数！
我：我的程序在本机跑了3s，不过我的本机是奔腾的。
出题人：没关系我的也是。
我：！！？？
后来跑了下测试数据发现最慢的要12s……
D7 肠胃炎
D8 再次爆炸……
t1这种区间覆盖关键点的问题，可以把区间的端点都离散到关键点上面。标算的思路是按左端点排序然后依次考虑每个区间对dp数组的贡献。hsz的做法是容斥，f[i]表示钦定i不被覆盖前面不一定后面一定不被覆盖的方案数，然后$f_i=-\sum_{???} f_j$。感觉这两种思路都挺妙的可以学习一下。据说多做做atcoder可能可以提升dp水平？
t2我都想到鹦鹉那道题了我居然还没想到做法。$C_{2n}^{n}$增长得很快所以可以用2n个元素的n元集来编码一些东西。
t3是个贪心。如果想到要考虑权值最小的点，剩下想起来是不难的。我一开始就像对于任意一个点，它下面的节点要按什么顺序，自然就想不出来了……以后想不出来的时候一定要记住试试从极特殊的情况开始考虑。
D9 讲数论，感觉讲得还是不太难的。什么时候认真学一学类欧几里得算法。
下午练习题的t1挺有启发性的。莫队算法中，因端点变化造成的修改有$O(n\sqrt{n})$次，但查询只有$O(n)$次，所以莫队要套一个数据结构的话，$O(1)$修改，$O(\sqrt{n})$查询的分块往往比都是$O(\log n)$的数据结构要好。同样的思路也可以运用到在线莫队/带修改莫队/强制在线带修改莫队上。
D10 肠胃炎各种想吐，于是开场就决定战略性放弃一题，然后就放弃了据说最简单的t3……
后来看了看发现我并不会？？研究了一下发现一个东西。在dp里面，其实答案也可以看做以为状态，以此题为例，就有了三维状态：a卡到多少位，b卡到多少位，还有c串长度。发现前两维的变化都比较复杂，而第三位的变化比较简单，选择较简单的两个作为状态表示，剩下一个作为答案。
D11 讲数据结构，感觉不难。
D12 今天我的发挥真的很差，题目本身是不难的，但是我总是差一点点才能想到。
T1我的思维方向是完全正确的，但是最后统计两端贡献的时候，大概是因为太心急之类的原因，我没有注意到那个式子可以拆成T个数的和乘上T个数的和，而不是T^2个积的和。另外就是set的常数比较大需要手写个链表什么的。
T2我已经成功地证出了竞赛图在不强连通的时候一定是一个全序集，但是没有想到原图可以强连通缩点。缩点之后还需要一个很强的结论，就是强连通的竞赛图一定有长为3,4,5,&amp;hellip;,n的环（n为点数），这个其实挺好猜的，我的证明思路，也就是归纳，也是正确的。这说明我对竞赛图的处理技巧还不够熟悉，以后多注意注意吧。另外如果无环的时候有一些比较强的结论的话，要考虑一般情况可以试试缩点。
T3我已经证出了所有需要的结论，我已经意识要到把左端点看成1，右端点看成-1，而且1和-1一定构成括号序列，题目对于l，r单增的条件是为了保证每个括号序列与操作序列一一对应。这个时候直接dp就可以了，但我偏偏在想用组合数直接解决，最后还是没推出来。以后做题的时候，推出一些结论的时候，要看看它有没有什么“计划之外”的作用，因为一开始的思考方向、一开始希望这个结论起到的作用不一定是对的，说不定这个结论就可以用在别的方向上从而解决问题。
加油吧……
D13 被题面坑了……很多时间被我拿去想所谓的“不太难”实际上最难的题目……
t1黑白点分开考虑贡献，都是可算的。
t3利用分治来dp的思路挺妙的，因为c直接处理非常不方便，接着发现从小到大排序之后就可以保证一些性质，所以每次选择c最大的点分治。
D14 传说中最难的一天？emmmmm……</description>
    </item>
    
    <item>
      <title>jzoj5415题解</title>
      <link>http://whatever.seraphim.rocks/post/jzoj5415/</link>
      <pubDate>Mon, 23 Oct 2017 13:57:08 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/jzoj5415/</guid>
      <description>首先注意到，对于c一样且i%c一样的车站，它们能转移到的车站集合是一样的。考虑这些车站，它们对后面的车站的贡献都可以写成直线v[i]/ci+f[i]的形式。在后面转移的时候，其实就是要求在某一个横坐标的位置所有直线的最低点，此时有一个很自然的想法就是维护一个上凸壳。
这个凸壳乍一看很不好维护，但是仔细想一想会发现，每次新加进来一条直线的时候，这条直线在i处的高度肯定不比凸壳上任意一条直线要高（否则就可以用比当前直线低的直线来更新f[i])。那么，如果这条新加进来的直线的斜率小于等于凸壳上某条直线的斜率，凸壳上那条直线就没有用了，可以直接去掉。我觉得这道题最妙的就是这个性质，以前遇到类似的题没想出来，这回做的时候还是没想出来……
利用这个性质，就可以保证直线的斜率单调递增，从而用单调栈来维护上凸壳。
对于本题，总共需要维护maxc*maxc个凸壳，每次查询的时候要考虑maxc个。
时间复杂度$O(n\times\mathrm{maxc})$。
代码：
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;vector&amp;gt; #define ele int using namespace std; #define maxn 1000010 #define maxc 11 const ele INF=1e9; struct line{ double k,b; }; inline double calc(line a,line b){ return (b.b-a.b)/(a.k-b.k); } ele n,mc,c[maxn],v[maxn],f[maxn]; vector&amp;lt;line&amp;gt; s[maxc][maxc]; int main(){ //	freopen(&amp;quot;bus.in&amp;quot;,&amp;quot;r&amp;quot;,stdin); //	freopen(&amp;quot;bus.out&amp;quot;,&amp;quot;w&amp;quot;,stdout); scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n,&amp;amp;mc); for (int i=0; i&amp;lt;n; ++i) scanf(&amp;quot;%d%d&amp;quot;,c+i,v+i); f[0]=0; for (int i=0; i&amp;lt;n; ++i){ if (f[i]&amp;lt;INF){ line l=(line){(double)v[i]/c[i],-(double)v[i]/c[i]*i+f[i]}; while (s[c[i]][i%c[i]].</description>
    </item>
    
    <item>
      <title>bzoj1060题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1060/</link>
      <pubDate>Mon, 28 Aug 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1060/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1090题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1090/</link>
      <pubDate>Mon, 28 Aug 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1090/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1076题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1076/</link>
      <pubDate>Thu, 17 Aug 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1076/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1044题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1044/</link>
      <pubDate>Sat, 12 Aug 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1044/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1057题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1057/</link>
      <pubDate>Thu, 10 Aug 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1057/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1040题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1040/</link>
      <pubDate>Tue, 01 Aug 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1040/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1177题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1177/</link>
      <pubDate>Sun, 30 Jul 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1177/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1149题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1149/</link>
      <pubDate>Wed, 12 Jul 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1149/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1025题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1025/</link>
      <pubDate>Fri, 26 May 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1025/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1023&amp;4316题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj10234316/</link>
      <pubDate>Wed, 24 May 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj10234316/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1021题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1021/</link>
      <pubDate>Fri, 19 May 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1021/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1019题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1019/</link>
      <pubDate>Tue, 16 May 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1019/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1017题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1017/</link>
      <pubDate>Fri, 12 May 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1017/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj3675题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj3675/</link>
      <pubDate>Wed, 15 Mar 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj3675/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hdu6017题解</title>
      <link>http://whatever.seraphim.rocks/post/hdu6017/</link>
      <pubDate>Sat, 25 Feb 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/hdu6017/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj2958题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj2958/</link>
      <pubDate>Thu, 23 Feb 2017 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj2958/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1009题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1009/</link>
      <pubDate>Sun, 18 Dec 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1009/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1003题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1003/</link>
      <pubDate>Wed, 14 Dec 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1003/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1010题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1010/</link>
      <pubDate>Tue, 13 Dec 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1010/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj3209题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj3209/</link>
      <pubDate>Sat, 22 Oct 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj3209/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj2423题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj2423/</link>
      <pubDate>Fri, 09 Sep 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj2423/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj3329题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj3329/</link>
      <pubDate>Sat, 27 Aug 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj3329/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1087题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1087/</link>
      <pubDate>Wed, 29 Jun 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1087/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj2431题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj2431/</link>
      <pubDate>Mon, 20 Jun 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj2431/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bzoj1260题解</title>
      <link>http://whatever.seraphim.rocks/post/bzoj1260/</link>
      <pubDate>Sun, 08 May 2016 10:02:43 +0000</pubDate>
      
      <guid>http://whatever.seraphim.rocks/post/bzoj1260/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>